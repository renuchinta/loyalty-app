Business User registration
Customer Registration

Add Products (back end implementation only)
Add Product Offers (back end implementation only)

After business user registration, assign product id to business user and intern assign product offer to product

One Customer can have multiple orders

Business user to complete sign up :
    business user id: 1
    product

    install docker & docker-compose in ec2 instance
    https://www.cyberciti.biz/faq/how-to-install-docker-on-amazon-linux-2/

 Docker commands
 1: docker build



<!-- <dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-spring-boot-starter</artifactId>
		</dependency> -->


        application.yml 

# keycloak:
#   realm: loyalty
#   auth-server-url: http://localhost:8080
#   resource: loyalty-client
#   public-client: true
#   bearer-only: true



// package com.loyalty.config;

// import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
// import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
// import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
// import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
// import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.context.annotation.Bean;
// import org.springframework.context.annotation.Import;
// import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
// import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
// import org.springframework.security.config.annotation.web.builders.HttpSecurity;
// import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
// import org.springframework.security.core.session.SessionRegistry;
// import org.springframework.security.core.session.SessionRegistryImpl;
// import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
// import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;

// //@KeycloakConfiguration
// //@EnableGlobalMethodSecurity(jsr250Enabled = true)
// //@Import(KeycloakSpringBootConfigResolver.class)
// public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter
// {
//     /**
//      * Registers the KeycloakAuthenticationProvider with the authentication manager.
//      */
//     @Autowired
//     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
//         KeycloakAuthenticationProvider keycloakAuthenticationProvider = new KeycloakAuthenticationProvider();
//         keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(new SimpleAuthorityMapper());
//         auth.authenticationProvider(keycloakAuthenticationProvider);
//     }

//     /**
//      * Defines the session authentication strategy.
//      */
//     @Bean
//     @Override
//     protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
//         return new RegisterSessionAuthenticationStrategy(buildSessionRegistry());
//     }

//     @Bean
//     protected SessionRegistry buildSessionRegistry() {
//         return new SessionRegistryImpl();
//     }

//     @Override
//     protected void configure(HttpSecurity http) throws Exception
//     {
//         super.configure(http);
//         http
//                 .authorizeRequests()

//                 .anyRequest().permitAll();
//     }
// }



<dependencyManagement>
		<!-- <dependencies>
			<dependency>
				<groupId>org.keycloak.bom</groupId>
				<artifactId>keycloak-adapter-bom</artifactId>
				<version>20.0.5</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies> -->
	</dependencyManagement>




		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>